#instead of a simple variable that holds one type of data, we can create an object that allows for multiple parts of information to exist that are all connected to the object.
#a class is a blueprint of an object. It is not the object itself, it's just the form we use to create the object
class Person:
    #Then, underneath that class declaration we put a function that is always the same, no matter what type of class you're creating. The function is init() which stands for initialize. This function is used to initialize the class when we create our first object.
    #def __init__( )
    #NOTICE!  There are TWO underscores before the init and TWO underscores after the init in this code.  There is also a space between the def and the first underscore! It must be typed this way to work correctly.  This is correct Python syntax.
    #In the init() function we need to add the parameters. The init() function MUST always have a self parameter. In addition to the self parameter, we add in any attributes we want our class to have. In this case, our Person class will have name, age, and gender attributes, so these are added in as parameters.
    def __init__(self, name, age, gender):
        #The final step in creating this function is to add in the attribute assignments. This is where we set the name of the class attribute to the name of the person we're creating. 
        self.name = name
        self.age = age
        self.gender = gender
        #Remember that this class is not an object!! This class is a template we use to create an object. Another way to say creating an object using a class is to say we create an instance of the class
    #We can also add functions to our classes. These functions are called methods.
    def greeting(self):
        if self.name == "Minos prime":
            print("Aah, free at last. O Gabriel, now dawns thy reckoning and ##### upon the temples of man. Creature of steel, my gratitude for my freedom, but the crimes that thy kind have committed against humanity are NOT forgotten. And thy punishment... is #####!")
        else:
            print("howdy")

#Now that we have created a Person class, we're now able to create an instance of that class, or in other words, we are ready to create an object!
p1 = Person("Minos prime", "80", "male")
p1.greeting()
print(p1)
#As you can see from the above example, when you print p1, it returns a reference to that object. It doesn't return the attributes of your object. Let's learn how to access the specific attributes of your object named p1.
#This is done by calling the object name and the attribute like this:
print(p1.name)
#we can also concatenate like this:
print("Person 1: " + p1.name + " " + p1.age + " " + p1.gender)
#if we make another instance, we can use p1 and the new instance without any conflicts or overwriting.

#you can add attributes to an object like this:
p1.defeated = True
print(p1.defeated)
#you can also remove attributes to an object like this:
delattr(p1, 'age')
#in order to remove only the value of an attribute in an object, use
del p1.gender
#you can also change attributes in an object like this:
p1.gender = "thy end is now"
